# -*- coding: utf-8 -*-
"""customer churn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MRmOUZfoSkGq_Ou3MEyouNDd3aI5kdgb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score



import pandas as pd

# Load your dataset
df = pd.read_csv('/content/Churn_Modelling_dataset.csv')  # Replace with your filename
print(df.shape)
df.head()

import pandas as pd

# Load your data
df = pd.read_csv('/content/Churn_Modelling_dataset.csv')

# Rename 'exited' to 'Churn' for clarity
df.rename(columns={'exited': 'Churn'}, inplace=True)

# Check for missing values
print(df.isnull().sum())

# Drop rows with missing values (or use imputation as needed)
df = df.dropna()

# Remove duplicates
df = df.drop_duplicates()

# Encode categorical variables
df = pd.get_dummies(df, drop_first=True)

# (No need to encode 'Churn' since it's already 0/1)
# Scale numerical features
from sklearn.preprocessing import StandardScaler

# Get numerical columns, EXCLUDING 'Churn' before get_dummies
numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns
# Remove 'Churn' only if it's in the list
if 'Churn' in numerical_cols:
    numerical_cols = numerical_cols.drop('Churn')

scaler = StandardScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

import pandas as pd

# Load your data
df = pd.read_csv('/content/Churn_Modelling_dataset.csv')

# Fill missing categorical values with the most frequent value (mode)
df['Geography'].fillna(df['Geography'].mode()[0], inplace=True)
df['HasCrCard'].fillna(df['HasCrCard'].mode()[0], inplace=True)
df['IsActiveMember'].fillna(df['IsActiveMember'].mode()[0], inplace=True)

# Fill missing numerical value with the mean
df['Age'].fillna(df['Age'].mean(), inplace=True)

# Check if all missing values are handled
print(df.isnull().sum())
print(df.isnull().sum().sum())

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Assuming 'df' is your DataFrame from previous cells

# ... (Your previous code to load and preprocess 'df') ...

# Select only numerical features for correlation
numerical_df = df.select_dtypes(include=['number'])

# Histogram for numerical features
numerical_df.hist(figsize=(10, 8))
plt.tight_layout()
plt.show()

# Boxplot for outliers
for col in numerical_df.columns:  # Iterate over numerical columns only
    plt.figure()
    sns.boxplot(x=numerical_df[col])  # Use numerical_df
    plt.title(f'Boxplot of {col}')
    plt.show()

# Correlation heatmap using only numerical features
plt.figure(figsize=(12, 8))
sns.heatmap(numerical_df.corr(), annot=True, fmt='.2f', cmap='coolwarm')  # Use numerical_df
plt.title('Feature Correlation Heatmap')
plt.show()

import pandas as pd

# Example: Create a tenure group feature
df['TenureGroup'] = pd.cut(df['Tenure'],
                           bins=[0, 3, 6, 9, 12],
                           labels=['0-3', '4-6', '7-9', '10-12'])

# Select numerical features for correlation calculation
numerical_features = df.select_dtypes(include=['number']).columns

# Example: Select top features based on correlation with churn,
# using only numerical features
corr = df[numerical_features].corr()['Exited'].abs().sort_values(ascending=False)
top_features = corr[1:6].index  # Top 5 features excluding 'Churn'
print("Top features:", top_features)

# Example: Keep only the top features and the target
df = df[list(top_features) + ['Exited']]
print(df.head())

import pandas as pd

# Load your data
df = pd.read_csv('/content/Churn_Modelling_dataset.csv')

# Fill missing values for specified columns
df['Geography'].fillna(df['Geography'].mode()[0], inplace=True)
df['HasCrCard'].fillna(df['HasCrCard'].mode()[0], inplace=True)
df['IsActiveMember'].fillna(df['IsActiveMember'].mode()[0], inplace=True)
df['Age'].fillna(df['Age'].mean(), inplace=True)

# Fill any remaining numeric NaNs
df.fillna(df.mean(numeric_only=True), inplace=True)

# Fill any remaining categorical NaNs
for col in df.select_dtypes(include='object').columns:
    df[col].fillna(df[col].mode()[0], inplace=True)

# Final check
print("Total missing values:", df.isnull().sum().sum())

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve

# Assuming 'logreg' and 'X_test' are already defined from your previous code...

# Generate predictions first
y_pred = logreg.predict(X_test)

# Accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))

# Classification report
print(classification_report(y_test, y_pred))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# ROC-AUC
y_prob = logreg.predict_proba(X_test)[:,1]
roc_auc = roc_auc_score(y_test, y_prob)
print("ROC-AUC Score:", roc_auc)

# ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
plt.plot(fpr, tpr, label=f'Logistic Regression (AUC = {roc_auc:.2f})')
plt.plot([0,1],[0,1],'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Load your data
df = pd.read_csv('/content/Churn_Modelling_dataset.csv')

# Fill missing values for all columns (numeric and categorical)
for col in df.columns:
    if df[col].dtype == 'O':
        df[col].fillna(df[col].mode()[0], inplace=True)
    else:
        df[col].fillna(df[col].mean(), inplace=True)

# Double-check: Drop any remaining rows with NaNs
df = df.dropna()

# Encode categorical variables
df = pd.get_dummies(df, columns=['Geography', 'Gender'], drop_first=True)

# Select features (update as needed)
top_features = [
    'CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts',
    'HasCrCard', 'IsActiveMember', 'EstimatedSalary',
    'Geography_Germany', 'Geography_Spain', 'Gender_Male'
]
X = df[top_features]
y = df['Exited']

# Final NaN check
print("Any missing in X?", X.isnull().values.any())
print("Any missing in y?", y.isnull().values.any())

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
logreg = LogisticRegression(max_iter=1000)
logreg.fit(X_train, y_train)

import joblib
joblib.dump(logreg, 'churn_logreg_model.pkl')